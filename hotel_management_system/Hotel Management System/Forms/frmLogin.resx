<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAAACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAD///8AAIzxAACK8QDK5/wAVbP1AJjQ+QD9//8ARqz1ALbe+wAAh/EA0ev8AIfJ+QCQzfkA+v7/ANnu
        /QDC5PwAYbj2AKHV+gAAg/AAdsL3ACqY8gCGwPcAW7X2AKjR+QBvvvcAwNr6ALDc+wDf8P0Agcb4AEab
        8gA8pfQAqtf6ADmZ8gB8t/UAsNL5ACig9AAAffAAn835AFms9QAflvIAR6f0ADKi9AAVkfIAUa31AOz2
        /QBntfYAl8r5AHK49gDQ5PsAdq71AG6v9QBkrfYAV6L0AJDA9wBQpPQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
        DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQAAAAAAAAAAAAAAAAAAAAAAAAAADS0UKioqKioqKioqKioqKioqKioq
        KioqKioqKioqKioqKioqKioqKioqKioqFC4GAAAAAAAAAAAAAAAAAAAAAycCAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECFCwAAAAAAAAAAAAAAAAALCoBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBgAAAAAAAAAAAAAAACsBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAhMAAAAAAAAAAAAAACwqAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUAAAAAAAAAAAAAAAwAgEB
        AQEBCQIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgEBAQEBAQAAAAAAAAAAAAAA
        GQIBAQEBKQ4OHgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEaGxUCAQEBAQEGAAAAAAAA
        AAAAABkqAQEBAg8AADACAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEyAAAAIAEBAQEqBgAA
        AAAAAAAAAAAZKgEBAQIwAAAOCQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBIQAAACABAQEB
        KgYAAAAAAAAAAAAAGSoBAQECMAAAGyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4AAAAg
        AQEBASoGAAAAAAAAAAAAABknAQEBAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAIAEBAQEqBgAAAAAAAAAAAAAZJwEBAQIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAACABAQEqKgYAAAAAAAAAAAAAGScqAQECMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAgAQEBKioGAAAAAAAAAAAAABknKgEBAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAIAEBASonBgAAAAAAAAAAAAAZFCoBAQIwAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAACABAQEqJwYAAAAAAAAAAAAAGRQqAQECMAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQEBKicGAAAAAAAAAAAAABkpKgEBAjAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>